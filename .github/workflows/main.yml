name: Kernel Build (C25Y) - SUSFS + KSU NEXT | clang-r547379 # Fixed typo

on:
  pull_request:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title (defaults to codename)'
        required: false
      KERNEL_TREE:
        description: 'Kernel Tree URL'
        default: 'https://github.com/cabagekiller/realme_C25Y-AndroidR-kernel-source.git'
        required: true
      KERNEL_TREE_BRANCH:
        description: 'Kernel Tree Branch'
        required: true
        default: 'master'
      CODENAME:
        description: 'Phone Codename'
        default: 'c25y'
        required: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
        default: 'https://github.com/cabagekiller/AnyKernel3.git'
        required: false
      ANYKERNEL_BRANCH:
        description: 'AnyKernel Branch (defaults to main)' # Changed default to main as per input
        default: 'non-gki'
        required: false
      SECOND_ANYKERNEL_URL:
        description: 'Second AnyKernel Url (leave blank if you dont want AnyKernel)'
        default: 'https://github.com/cabagekiller/AnyKernel3.git'
        required: false
      SECOND_ANYKERNEL_BRANCH:
        description: 'Second AnyKernel Branch (defaults to main)' # Changed default to main as per input
        default: 'non-gki'
        required: false
      UPLOAD_TO_RELEASE:
        description: 'Upload zip(s) to GitHub Release'
        type: boolean
        default: false

jobs:
  build:
    # Only run job if triggered by the repository owner
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases and pushing potential changes (if any)
    env:
      KERNEL_DIR: ${{ github.workspace }}/kernel_tree
      CLANG_DIR: ${{ github.workspace }}/clang
      ANYKERNEL_DIR: ${{ github.workspace }}/AnyKernel3 # Base directory for AnyKernel checkouts

    steps:
      - name: Display User Inputs
        run: |
          echo "::group::User Environment Variables"
          echo "Custom Build Title: ${{ github.event.inputs.BUILD_TITLE || github.event.inputs.CODENAME }}"
          echo "Kernel Tree: ${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }}"
          echo "Codename: ${{ github.event.inputs.CODENAME }}"
          echo "AnyKernel Url: ${{ github.event.inputs.ANYKERNEL_URL }}/tree/${{ github.event.inputs.ANYKERNEL_BRANCH || 'main' }}"
          echo "Second AnyKernel Url: ${{ github.event.inputs.SECOND_ANYKERNEL_URL }}/tree/${{ github.event.inputs.SECOND_ANYKERNEL_BRANCH || 'main' }}"
          echo "Upload to Release: ${{ github.event.inputs.UPLOAD_TO_RELEASE }}"
          echo "::endgroup::"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Build Bot"
          git config --global user.email "actions@github.com" # Generic email is fine

      - name: Set Build Title and Start Time
        id: prep
        run: |
          echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
          BUILD_TITLE="${{ github.event.inputs.BUILD_TITLE }}"
          if [ -z "$BUILD_TITLE" ]; then
            BUILD_TITLE="${{ github.event.inputs.CODENAME }}"
          fi
          echo "build_title=$BUILD_TITLE" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ccache coreutils file flex \
            g++ gcc git libelf-dev libfl-dev libncurses6 libssl-dev \
            llvm-dev make ninja-build python3 python3-dev python3-pip \
            python3-setuptools rsync unzip wget libyaml-dev zip -qq

      - name: Cache Clang Toolchain
        uses: actions/cache@v4
        id: cache-clang
        with:
          path: ${{ env.CLANG_DIR }}
          key: clang-r547379-ubuntu-latest

      - name: Download and Extract Clang (if not cached)
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          echo "Downloading and extracting clang..."
          mkdir -p "${{ env.CLANG_DIR }}"
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
          tar -xf clang.tar.gz -C "${{ env.CLANG_DIR }}"
          rm clang.tar.gz
          echo "Clang downloaded and extracted."

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G # Adjust size as needed

      - name: Clone kernel source and other repositories
        id: clone
        run: |
          echo "Cloning Kernel Tree..."
          git clone --depth=1 "${{ github.event.inputs.KERNEL_TREE }}" -b "${{ github.event.inputs.KERNEL_TREE_BRANCH }}" "${{ env.KERNEL_DIR }}"
          
          echo "Cloning other repositories..."
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.14 "${{ github.workspace }}/susfs4ksu"
          git clone --depth=1 https://github.com/TheWildJames/kernel_patches.git "${{ github.workspace }}/kernel_patches"
          
          # Output kernel directory for subsequent steps
          echo "kernel-folder=${{ env.KERNEL_DIR }}" >> $GITHUB_OUTPUT

      - name: Apply KernelSU and SUSFS patches
        working-directory: ${{ steps.clone.outputs.kernel-folder }}
        run: |
          set -e # Exit on error
          echo "Current directory: $(pwd)"

          echo "--- Setting up KernelSU-Next ---"
          # Ensure KernelSU directory exists before attempting removal
          rm -rf KernelSU-Next 
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next-susfs-dev
          echo "--- KernelSU-Next setup complete ---"

          echo "--- Preparing and Applying Patches ---"
          # Ensure target directories exist
          mkdir -p fs include/linux 

          # Copy SUSFS source files
          cp ../susfs4ksu/kernel_patches/fs/susfs.c fs/
          cp ../susfs4ksu/kernel_patches/include/linux/susfs.h include/linux/
          cp ../susfs4ksu/kernel_patches/include/linux/susfs_def.h include/linux/

          # Apply patches (using relative paths)
          # Consider removing `|| true` if patch failures should stop the build
          echo "Applying 50_add_susfs_in_kernel-4.14.patch..."
          patch -p1 -F 3 -N < ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch || true
          
          echo "Applying 69_hide_stuff.patch..."
          patch -p1 -F 3 -N < ../kernel_patches/69_hide_stuff.patch || true
          patch -p1 -F 3 -N < ../kernel_patches/next/next_hooks_4.14.patch || true
          
          # Optional KernelSU-Next patch (Apply if needed)
          # echo "Applying 10_enable_susfs_for_ksu.patch..."
          # (cd KernelSU-Next && patch -p1 -N < ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch || true)

          # Optional fix patches (Uncomment and apply if needed)
          # echo "Applying selinux.c_fix.patch..."
          # patch -p1 -F 3 -N < ../kernel_patches/selinux.c_fix.patch || true
          # echo "Applying apk_sign.c_fix.patch..."
          # patch -p1 -F 3 -N < ../kernel_patches/apk_sign.c_fix.patch || true
          # echo "Applying Makefile_fix.patch..."
          # patch -p1 -F 3 -N < ../kernel_patches/Makefile_fix.patch || true
          # echo "Applying core_hook.c_fix.patch..."
          # patch -p1 -F 3 -N < ../kernel_patches/core_hook.c_fix.patch || true

          echo "--- Modifying build files ---"
          # Modify build configuration files if necessary
          #sed -i '2s/check_defconfig//' build.config.gki # Example modification
          
          echo "--- Appending KSU/SUSFS config to defconfig ---"
          cat >> arch/arm64/configs/RMX3265_defconfig <<EOF

          # KernelSU + SUSFS Configs
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          # Explicitly disable Kprobes if not needed/wanted
          # CONFIG_KPROBES is not set
          # CONFIG_HAVE_KPROBES is not set
          # CONFIG_KPROBE_EVENTS is not set
          EOF
          echo "--- Patching and Configuration Complete ---"

      - name: Build Kernel
        id: build
        working-directory: ${{ steps.clone.outputs.kernel-folder }}
        run: |
          BUILD_START_TIME=$(date +%s)
          echo "Building kernel..."
          
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="cabagekiller" # Or use github.actor
          export KBUILD_BUILD_HOST="GitHubActions"
          export PATH="${{ env.CLANG_DIR }}/bin:${PATH}"
          
          # Setup build output directory
          mkdir -p out
          
          # Build steps
          make O=out ARCH=arm64 RMX3265_defconfig V=1
          make O=out CC=clang LLVM=1 LLVM_IAS=1 -j"$(nproc --all)" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            READELF=llvm-readelf \
            OBJSIZE=llvm-size \
            V=1

          BUILD_END_TIME=$(date +%s)
          BUILD_ELAPSED_TIME=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Kernel build finished in $BUILD_ELAPSED_TIME seconds."
          echo "elapsed_time=$BUILD_ELAPSED_TIME" >> $GITHUB_OUTPUT
          
          # Define expected output artifact paths
          echo "image_path=out/arch/arm64/boot/Image.gz" >> $GITHUB_OUTPUT
          echo "dtb_path=out/arch/arm64/boot/dtb" >> $GITHUB_OUTPUT # Note: Renamed later
          echo "dtbo_path=out/arch/arm64/boot/dtbo.img" >> $GITHUB_OUTPUT
          echo "boot_dir=out/arch/arm64/boot" >> $GITHUB_OUTPUT


      - name: Package with AnyKernel3
        id: package # Added ID to reference outputs
        # Use the boot directory output from the build step
        working-directory: ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.boot_dir }}
        run: |
          set -e
          echo "Current directory for packaging: $(pwd)"
          
          # Check if kernel image exists
          if [ ! -f Image.gz ]; then
             echo "Error: Kernel Image.gz not found!"
             exit 1
          fi
          
          # Rename dtb.img to dtb if it exists
          if [ -f dtb.img ]; then
             echo "Renaming dtb.img to dtb"
             mv dtb.img dtb
          fi

          # Function to handle AnyKernel packaging
          handle_anykernel() {
            local ak_url="$1"
            local ak_branch="$2"
            local ak_name_prefix="$3"
            local zip_output_var="$4"
            
            if [[ -n "$ak_url" ]]; then
              # Default branch to 'main' if not provided
              local ak_branch_final="${ak_branch:-main}" 
              local ak_folder_name="${ak_name_prefix}_AnyKernel3" # Unique folder name
              # Clone AnyKernel outside the loop CWD, but reference artifacts from CWD
              echo "Cloning $ak_name_prefix AnyKernel from $ak_url branch $ak_branch_final..."
              git clone --recursive --depth=1 "$ak_url" -b "$ak_branch_final" "../${ak_folder_name}" # Clone one level up

              echo "Copying kernel artifacts..."
              cp -f Image.gz "../${ak_folder_name}/"
              if [ -f dtb ]; then
                cp -f dtb "../${ak_folder_name}/"
              fi
              if [ -f dtbo.img ]; then
                cp -f dtbo.img "../${ak_folder_name}/"
              fi
              
              # Zip from the AnyKernel directory
              local zip_name="${ak_name_prefix}-KSUNEXT-SUSFS-${{ github.event.inputs.CODENAME }}-$(date +%Y%m%d-%H%M).zip"
              echo "Creating zip file: $zip_name"
              (cd "../${ak_folder_name}" && zip -q -r "../../${zip_name}" *) # Zip back into the boot dir
              
              # Output the zip file name relative to the boot dir
              echo "$zip_output_var=$zip_name" >> $GITHUB_OUTPUT 
              echo "Created $zip_name"
              # Clean up cloned AnyKernel folder
              rm -rf "../${ak_folder_name}" 
            else
              echo "Skipping $ak_name_prefix AnyKernel (URL not provided)."
              # Set output variable to empty string if skipped
              echo "$zip_output_var=" >> $GITHUB_OUTPUT 
            fi
          }

          # Package first AnyKernel if URL provided
          handle_anykernel "${{ github.event.inputs.ANYKERNEL_URL }}" "${{ github.event.inputs.ANYKERNEL_BRANCH }}" "N0kernel-AOSP" "anykernel_zipname"
          
          # Package second AnyKernel if URL provided
          handle_anykernel "${{ github.event.inputs.SECOND_ANYKERNEL_URL }}" "${{ github.event.inputs.SECOND_ANYKERNEL_BRANCH }}" "N0kernel-HYPEROS" "second_anykernel_zipname"

      - name: Upload to GitHub Release (if enabled)
        if: github.event.inputs.UPLOAD_TO_RELEASE == true && (steps.package.outputs.anykernel_zipname != '' || steps.package.outputs.second_anykernel_zipname != '')
        uses: softprops/action-gh-release@v2
        with:
          # Create a list of files dynamically based on generated zips
          files: |
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.boot_dir }}/${{ steps.package.outputs.anykernel_zipname }}
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.boot_dir }}/${{ steps.package.outputs.second_anykernel_zipname }}
          name: ${{ steps.prep.outputs.build_title }} | ${{ github.event.inputs.CODENAME }} | ${{ github.run_id }} # More descriptive name
          tag_name: ${{ github.event.inputs.CODENAME }}-${{ github.run_id }} # Unique tag per run
          body: |
            **Build:** `${{ steps.prep.outputs.build_title }}`
            **Device:** `${{ github.event.inputs.CODENAME }}`
            **Features:** KernelSU-Next + SUSFS
            **Clang:** r547379
            
            **Build completed successfully!** Took ${{ steps.build.outputs.elapsed_time }} seconds.
            
            **Kernel Tree:** [${{ github.event.inputs.KERNEL_TREE_BRANCH }}](${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }})
            **Build Log:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            *Generated AnyKernel3 zip(s) are attached below.*
          prerelease: false # Set to true if you want pre-releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Kernel Artifacts (if not releasing)
        if: github.event.inputs.UPLOAD_TO_RELEASE != true
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Binaries-${{ github.event.inputs.CODENAME }}
          path: |
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.image_path }}
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.dtb_path }}
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.dtbo_path }}

      - name: Upload AnyKernel Zips Artifacts (if not releasing)
        # Only run if not releasing AND at least one zip was created
        if: github.event.inputs.UPLOAD_TO_RELEASE != true && (steps.package.outputs.anykernel_zipname != '' || steps.package.outputs.second_anykernel_zipname != '')
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel-Zips-${{ github.event.inputs.CODENAME }}
          path: |
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.boot_dir }}/${{ steps.package.outputs.anykernel_zipname }}
            ${{ steps.clone.outputs.kernel-folder }}/${{ steps.build.outputs.boot_dir }}/${{ steps.package.outputs.second_anykernel_zipname }}
